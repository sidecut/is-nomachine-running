// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nomachine_status/v1/nomachine_status.proto

package is_nomachine_running

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetStatusServiceClient is the client API for GetStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetStatusServiceClient interface {
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
}

type getStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetStatusServiceClient(cc grpc.ClientConnInterface) GetStatusServiceClient {
	return &getStatusServiceClient{cc}
}

func (c *getStatusServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/nomachine_status.v1.GetStatusService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetStatusServiceServer is the server API for GetStatusService service.
// All implementations must embed UnimplementedGetStatusServiceServer
// for forward compatibility
type GetStatusServiceServer interface {
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	mustEmbedUnimplementedGetStatusServiceServer()
}

// UnimplementedGetStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetStatusServiceServer struct {
}

func (UnimplementedGetStatusServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedGetStatusServiceServer) mustEmbedUnimplementedGetStatusServiceServer() {}

// UnsafeGetStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetStatusServiceServer will
// result in compilation errors.
type UnsafeGetStatusServiceServer interface {
	mustEmbedUnimplementedGetStatusServiceServer()
}

func RegisterGetStatusServiceServer(s grpc.ServiceRegistrar, srv GetStatusServiceServer) {
	s.RegisterService(&GetStatusService_ServiceDesc, srv)
}

func _GetStatusService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetStatusServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomachine_status.v1.GetStatusService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetStatusServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetStatusService_ServiceDesc is the grpc.ServiceDesc for GetStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomachine_status.v1.GetStatusService",
	HandlerType: (*GetStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _GetStatusService_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nomachine_status/v1/nomachine_status.proto",
}
